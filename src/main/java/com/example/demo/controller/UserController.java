package com.example.demo.controller;

import com.example.demo.repository.entity.User;
import com.example.demo.service.UserService;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;


//@Controller // This means that this class is a Controller
//@RequestMapping("/users")
@RestController
public class UserController {
//	@Autowired // This means to get the bean called UserService
	// Which is auto-generated by Spring, we will use it to handle the data
	private final UserService userService;

	@Autowired
	private JdbcTemplate jdbcTemplate;

	// dependency injection to access UserServiceMySQL methods
	public UserController(@Autowired UserService userService) {
		this.userService = userService;
	}

	@GetMapping("/user/{userId}")
	public User findUserById(@PathVariable Integer userId) {
		return userService.findById(userId);
	}

	/*@GetMapping("/index")
	public User findUserById(@PathVariable Integer userId, Model model) {
		User user = userService.findById(userId);

		// Pass user details to the Thymeleaf template
		model.addAttribute("user", user);
		return user;
	}*/

//	API to call when you need to get user information. Password remains encrypted.
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public User findByUsername() {
//		Object username = Authentication authentication.getPrincipal();
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

		// UserDetails is a provided default interface class from Spring Security Core
		UserDetails userDetails = (UserDetails) authentication.getPrincipal();

		System.out.println(userDetails.getUsername());

		User user = userService.findByUsername(userDetails.getUsername());

		return user;
	}

//	Alternative to above
	@RequestMapping(value = "/user2", method = RequestMethod.GET)
	public User findbyUsername(HttpServletRequest request) {
		// Retrieve the currently logged-in user's username
		String username = request.getUserPrincipal().getName();

		// Check
		System.out.println(username);
		User user = userService.findByUsername(username);
		return user;
	}
}
